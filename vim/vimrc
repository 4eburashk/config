"================================================
" 
" 	Edit by 4eburashk http://csn.net4me.net
" 		On Tue 28 Sep 2021 03:07:33 AM MSK
" 
"================================================
	if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
		set fileencodings=utf-8,latin1
	endif
	if v:progname =~? "evim"
		finish
	endif
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
	set nocompatible
	set backspace=indent,eol,start
	set history=80          " keep 80 lines of command line history
	set ruler               " show the cursor position all the time
	set showcmd             " show partial command in status line
	set viminfo='80,%,n~/.viminfo
" Don't use Ex mode, use Q for formatting
	map Q gq
" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
	if &t_Co > 2 || has("gui_running")
		syntax on
		set hlsearch
  	" my for not beep:
  	set vb t_vb="<Esc>|40f"
  	" my for olors:
  	":colorscheme net4me
	endif
" Only do this part when compiled with support for autocommands.
	if has("autocmd")
		" always jump to the last cursor position
		autocmd BufReadPost *
		\ if line("'\"") > 0 && line ("'\"") <= line("$") |
		\   exe "normal! g'\"" |
		\ endif
		"for autocreate files content. Change path to your files or comment this:
		:autocmd BufNewFile  *.py       0r ~/vim/mytemplates/mytemplates/python.txt
		:autocmd BufNewFile  *.html     0r ~/vim/mytemplates/mytemplates/html.txt
		:autocmd BufNewFile  *.c     0r ~/vim/mytemplates/mytemplates/c.txt
		:autocmd BufNewFile  *.cpp     0r ~/vim/mytemplates/mytemplates/cpp.txt
		:autocmd BufNewFile  *.h     0r ~/vim/mytemplates/mytemplates/h.txt
		:autocmd BufNewFile  *.pl     0r ~/vim/mytemplates/mytemplates/perl.txt
		:autocmd BufNewFile  *.rb     0r ~/vim/mytemplates/mytemplates/ruby.txt
		"for auto change path to dir with edited file:
		:autocmd BufEnter * lcd %:p:h
	endif

	if has("title")
		set notitle
		set noicon
	endif

" Persistent undo
	try 
		set undodir=~/.vim/undo//
		set undofile
		set undolevels=1000   " How many undos
		set undoreload=10000  " number of lines to save for undo
	catch
	endtry

" Tab = (4*space)
	set tabstop=2
	set sw=4
	set nomodeline
	set noautoindent
" on search T=t:
	set ignorecase
" my for right vertical window active
	set splitright

" my maps:
" Insert my stamp (in i mode)
	imap <F4> <C-R>=MyStamp()<CR>
	function! MyStamp()
		let myhead = "\n\tEdit by 4eburashk http://csn.net4me.net\n\tOn "
		\ . strftime("%c")
		\ . "\n\n"
		return myhead
	endfunction

" HEX view on/off:
	map <F3> :Hex4me<CR>
" hex command for toggling hex mode - define mapping if desired
	command -bar Hex4me call HexView()
	" hex mode helper
	function HexView()
		" hex mode should be considered a read-only operation
		" save values for modified and read-only for restoration later,
		" and clear the read-only flag for now
		let l:modified=&mod
		let l:oldreadonly=&readonly
		let &readonly=0
		let l:oldmodifiable=&modifiable
		let &modifiable=1
		if !exists("b:editHex") || !b:editHex
			" save old options
			let b:oldft=&ft
			let b:oldbin=&bin
			" set new options
			setlocal binary " make sure it overrides any textwidth, etc.
			let &ft="xxd"
			" set status
			let b:editHex=1
			" switch to hex editor
			%!xxd
		else
			" restore old options
			let &ft=b:oldft
			if !b:oldbin
				setlocal nobinary
			endif
			" set status
			let b:editHex=0
			" return to normal editing
			%!xxd -r
		endif
		" restore values for modified and read only state
		let &mod=l:modified
		let &readonly=l:oldreadonly
		let &modifiable=l:oldmodifiable
	endfunction

" my menu for comments new:
	augroup commenting_blocks_of_code
	  autocmd!
	  autocmd FileType c,cpp,java,php let b:comment_leader = '// '
	  autocmd FileType sh,perl,ruby,python,awk   let b:comment_leader = '# '
	  autocmd FileType conf,fstab       let b:comment_leader = '# '
	  autocmd FileType mail             let b:comment_leader = '> '
	  autocmd FileType vim              let b:comment_leader = '" '
	augroup END
	noremap <silent> <F5> :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
	noremap <silent> <F6> :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" autocompletion {<Enter>}
"                imap {<CR> {<CR>}<Esc>O<Tab>

" Encoding old win:
"<F7> EOL format (dos <CR><NL>,unix <NL>,mac <CR>)
	set  wildmenu
	set  wcm=<Tab>
	menu EOL.unix :set fileformat=unix<CR>
	menu EOL.dos  :set fileformat=dos<CR>
	menu EOL.mac  :set fileformat=mac<CR>
	menu EOL.my_win2unix :%s /\r\n/\r/g<CR>
	map  <F7> :emenu EOL.<Tab>
"<F8> Change encoding
	set  wildmenu
	set  wcm=<Tab>
	menu Enc.cp1251     :e ++enc=cp1251<CR>
	menu Enc.koi8-r     :e ++enc=koi8-r<CR>
	menu Enc.cp866      :e ++enc=ibm866<CR>
	menu Enc.utf-8      :e ++enc=utf-8<CR>
	menu Enc.ucs-2le    :e ++enc=ucs-2le<CR>
	menu Enc.HexView    :Hex4me<CR>
	map  <F8> :emenu Enc.<Tab>
"<Shift+F8> Convert file encoding
	set  wildmenu
	set  wcm=<Tab>
	menu FEnc.cp1251    :set fenc=cp1251<CR>
	menu FEnc.koi8-r    :set fenc=koi8-r<CR>
	menu FEnc.cp866     :set fenc=ibm866<CR>
	menu FEnc.utf-8     :set fenc=utf-8<CR>
	menu FEnc.ucs-2le   :set fenc=ucs-2le<CR>
	map  <S-F8> :emenu FEnc.<Tab>
" <TAB> tupo tab indent
:vmap <Tab> >gv
:vmap <S-Tab> <gv

" Statusline
	set statusline="%<%f%h%m%r%=format=%{&fileformat}\ file=%{&fileencoding}\ enc=%{&encoding}\ %b\ 0x%B\ %l,%c%V\ %P"
	set laststatus=2
"
" vim :set et ts=2 sw=2 sts=2
" END
